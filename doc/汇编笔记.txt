deubg命令
u  反汇编
r  看寄存器
t  单步调试
d  看内存单元
p  中断调试

bx, si,di,bp 这四个寄存器可用[]来进行单元内寻址
bx的默认段地址为ds
bp的默认段地址为ss

加 
	指令 add
	add 寄存器，数据				比如：add ax,8
	add 寄存器，寄存器			比如：add ax,bx
	add 寄存器，内在单元			比如：add ax,[0]
	add 内存单元，寄存器			比如：add [0],ax
减 
	指令 sub
	sub 寄存器，数据				比如：sub ax,9
	sub 寄存器，寄存器			比如：sub ax,bx
	sub 寄存器，内存单元			比如：sub ax,[0]
	sub 内在单元，寄存器			比如：sub [0],ax
乘
	指令 mul
	(1)两个数是8位
	一个数放在al，另一个数放在8位寄存器或者内存单元中
	结果：放在ax中
	(2)两个数是16位
	一个数放在ax，另一个数放在16位寄存器或内存单元中
	结果：低们在ax，高位在dx
	示例：
	(1) mul byte ptr ds:[0]
	 含义：
		(ax)=(al)*((ds)*16+0)
	(2) mul word ptr [bx+si+8]
	含义：
		(ax)=(ax)*((ds)*16+(bx)+(si)+8)结果的低16位
		(dx)=(ax)*((ds)*16+(bx)+(si)+8)结果的高16位
除 
	指令 div
	(1)被除数为16位，除数为8位
	被除数放在ax，除数放在寄存器或内存单元
	结果：al存储商，ah存储余数
	(2)被除数为32位，除数为16位
	被除数高16位放在dx，低16位放在ax，除数放在寄存器或内在单元
	结果：ax存储商，dx存储余数
	指令格式：
	div 寄存器
	div 内存单元
	示例：
	(1) div byte ptr ds:[0]
	含义：
		(al)=(ax)/((ds)*16+0)的商
		(ah)=(ax)/((dx)*16+0)的余数
	(2) div word ptr es:[0]
	含义：
		(ax)=((dx)*10000H+(ax))/((es)*16+0)的商
		(dx)=((dx)*10000H+(ax))/((es)*16+0)的余数

重复定义伪指令 dup
	格式：
	db 重复的次数 dup (重复的字节型数据)
	dw 重复的次数 dup (重复的字型数据)
	dd 重复的次数 dup (重复的双字节型数据)
	db 3 dubp (0)
	定义了3个字节，它们的值都为0，相当于 db 0,0,0
	db 3 dup (0,1,2)
	定义了3个字，它们是0,1,2,0,1,2,0,1,2，相当于 db 0,1,2,0,1,2,0,1,2 。
	db 3 dup ('abc','ABC')
	定义了18个字节，它们是'abcABCabcABCabcABC',相当于db 'abcABCabcABCabcABC'

在内存间复制代码
	1、设置ds:si指向源地址
	2、设置es:di指向目的地址
	3、设置cx为传输长度
	4、cld，设置传输方向为正
	5、rep movsb，传输代码

回车 0DH，回到本行首位
换行 0AH，下行当前列
